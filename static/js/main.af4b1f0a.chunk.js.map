{"version":3,"sources":["TicTacToe.js","index.js"],"names":["check_winner","board","turn","length","check","arr","reduce","a","c","_loop","i","map","row","v","_ret","diagonal1","diagonal2","j","reducer","state","event","winner","ReactDOM","render","react_default","createElement","_useReducer","useReducer","_useReducer2","Object","slicedToArray","dispatch","window","Game","Fragment","concat","onClick","id","className","key","join","square","disabled","document","getElementById"],"mappings":"4NAGO,SAASA,EAAaC,EAAOC,GAIhC,IAHM,IAACC,EAAUF,EAAVE,OACHC,EAAQ,SAAAC,GAAG,OAAIA,EAAIC,OAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,IAAMN,IAAM,IAFnBO,EAAA,SAI7BC,GACL,GAAIN,EAAMH,EAAMS,KAAON,EAAMH,EAAMU,IAAI,SAAAC,GAAG,OAAIA,EAAIF,MAC9C,OAAAG,EAAOX,IAFNQ,EAAI,EAAGA,EAAIP,IAAUO,EAA9B,KAAAI,EAAAL,EAASC,GAAT,qBAAAI,EAAA,OAAAA,EAAAD,EAIA,IAAME,EAAY,CAAC,EAAG,EAAG,GAAGJ,IAAI,SAAAD,GAAC,OAAIT,EAAMS,GAAGA,KAC1CM,EAAY,CAAC,EAAG,EAAG,GAAGL,IAAI,SAACD,EAAGO,GAAJ,OAAUhB,EAAMS,GAAGO,KAEjD,OAAIb,EAAMW,IAAcX,EAAMY,GACnBd,EAEED,EAAMK,OAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,EAAEF,OAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,IAAG,KAAO,GAGhE,YAEJ,KAeJ,SAASU,EAAQC,EAAOC,GAC3B,GAAc,aAAVA,EACA,MAbG,CACHlB,KAAM,IACND,MAAO,CACH,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAEjBoB,OAAQ,MAIsB,IAI3BX,EAAQU,EAARV,EAAGO,EAAKG,EAALH,EACLhB,EAAekB,EAAflB,MAAOC,EAAQiB,EAARjB,KAEZ,OAAID,EAAMS,GAAGO,GACFE,GAEXlB,EAAMS,GAAGO,GAAKf,EAEP,CACHD,QACAC,KAAe,MAATA,EAAe,IAAM,IAC3BmB,OAAQrB,EAAaC,EAAOC,WC/CpCoB,IAASC,OAAOC,EAAAjB,EAAAkB,cDmDD,WAAqB,IAAAC,EACNC,qBAAWT,EA/B9B,CACHhB,KAAM,IACND,MAAO,CACH,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAEjBoB,OAAQ,OAuBoBO,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBP,EADyBS,EAAA,GAClBG,EADkBH,EAAA,GAKhC,OAFAI,OAAOC,KAAO,CAACd,QAAOY,YAEfP,EAAAjB,EAAAkB,cAAAD,EAAAjB,EAAA2B,SAAA,KACHV,EAAAjB,EAAAkB,cAAA,cACID,EAAAjB,EAAAkB,cAAA,yBACAD,EAAAjB,EAAAkB,cAAA,UAAKN,EAAME,OAAN,GAAAc,OAAkBhB,EAAME,OAAxB,aAAAc,OAA4ChB,EAAMjB,KAAlD,YAEDiB,EAAME,QAAUG,EAAAjB,EAAAkB,cAAA,UAAQW,QAAS,kBAAML,EAAS,cAAhC,eAGxBP,EAAAjB,EAAAkB,cAAA,OAAKY,GAAG,SAEAlB,EAAMlB,MAAMU,IAAI,SAACC,EAAKF,GAAN,OAAYc,EAAAjB,EAAAkB,cAAA,OAAKa,UAAU,MAAMC,IAAK7B,EAAIE,EAAI4B,KAAK,KAE3D5B,EAAID,IAAI,SAAC8B,EAAQxB,GAAT,OAAeO,EAAAjB,EAAAkB,cAAA,OAAKa,UAAU,SAASC,IAAG,GAAAJ,OAAKzB,GAALyB,OAASlB,GAATkB,OAAaM,IAC3DjB,EAAAjB,EAAAkB,cAAA,UAAQW,QAAS,kBAAML,EAAS,CAACrB,IAAGO,OAAKyB,WAAYvB,EAAME,QACtDoB,YCtEjB,MAAcE,SAASC,eAAe","file":"static/js/main.af4b1f0a.chunk.js","sourcesContent":["import React, {useReducer} from 'react';\nimport './TicTacToe.scss';\n\nexport function check_winner(board, turn) {\n    const {length} = board,\n        check = arr => arr.reduce((a, c) => a && c === turn, true);\n\n    for (let i = 0; i < length; ++i)\n        if (check(board[i]) || check(board.map(row => row[i])))\n            return turn;\n\n    const diagonal1 = [0, 1, 2].map(i => board[i][i]),\n        diagonal2 = [2, 1, 0].map((i, j) => board[i][j]);\n\n    if (check(diagonal1) || check(diagonal2))\n        return turn;\n\n    const draw = board.reduce((a, c) => a && c.reduce((a, c) => a && c, true), true);\n\n    if (draw)\n        return 'No Player';\n\n    return null;\n}\n\nexport function initial_state() {\n    return {\n        turn: 'X',\n        board: [\n            [null, null, null],\n            [null, null, null],\n            [null, null, null]\n        ],\n        winner: null\n    }\n}\n\nexport function reducer(state, event) {\n    if (event === 'new_game')\n        return initial_state();\n\n    const {i, j} = event,\n        {board, turn} = state;\n\n    if (board[i][j])\n        return state;\n\n    board[i][j] = turn;\n\n    return {\n        board,\n        turn: turn === 'X' ? 'O' : 'X',\n        winner: check_winner(board, turn)\n    };\n}\n\nexport default function TicTacToe() {\n    const [state, dispatch] = useReducer(reducer, initial_state());\n\n    window.Game = {state, dispatch};\n\n    return <>\n        <header>\n            <h1>Tic Tac Toe</h1>\n            <h3>{state.winner ? `${state.winner} Wins!` : `${state.turn}'s Turn`}</h3>\n            {\n                state.winner && <button onClick={() => dispatch('new_game')}>Play Again</button>\n            }\n        </header>\n        <div id=\"board\">\n            {\n                state.board.map((row, i) => <div className=\"row\" key={i + row.join('')}>\n                    {\n                        row.map((square, j) => <div className=\"square\" key={`${i}${j}${square}`}>\n                            <button onClick={() => dispatch({i, j})} disabled={!!state.winner}>\n                                {square}\n                            </button>\n                        </div>)\n                    }\n                </div>)\n            }\n        </div>\n    </>;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TicTacToe from './TicTacToe';\nimport './index.css';\n\nReactDOM.render(<TicTacToe/>, document.getElementById('root'));\n"],"sourceRoot":""}